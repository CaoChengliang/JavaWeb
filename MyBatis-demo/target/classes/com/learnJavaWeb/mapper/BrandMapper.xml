<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace :命名空间
-->

<mapper namespace="com.learnJavaWeb.mapper.BrandMapper">
    <!--还有update等标签 resultType返回什么类型
        数据库表字段名称和实体类的属性名称不一样 不能封装数据
        * 对不一样的列名起别名，让别名和实体类的属性名一样
                *缺点是每次查询都要定义一次
                *sql字段
                    *缺点是代码写死，固定

    -->
<!--    <select id="selectAll" resultType="brand">
               select * from tb_brand;

    </select>-->

<!--    <sql id="brand_column">

        id ,  brand_name as brandName, company_name as companyName, ordered, description, status

    </sql>
    <select id="selectAll" resultType="brand">
        select
        <include refid="brand_column"></include>
        from tb_brand;

    </select>-->
<!--    <select id="selectAll" resultType="brand">
        select id, brand_name as brandName, company_name as companyName, ordered, description, status
        from tb_brand;

    </select>-->
    <!--id 是唯一标识 type可以别名
       result 和 id 两种标签id是主键
    -->
    <resultMap id="brandResultMap" type="brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>

    </resultMap>



    <select id="selectAll" resultMap="brandResultMap">
        select
        *
        from tb_brand;

    </select>

    <!--
        ${}存在sQL注入问题
        #{}不存在SQL注入问题

        parameterType 可以省略

        若特殊字符比如 ‘<’号可以用转义字符或者CDTA区

         <![CDATA[
            <
            ]]>
    -->
    <select id="selectById"   resultMap="brandResultMap">
            select * from tb_brand where id
            <![CDATA[
            =
            ]]> #{id};

    </select>




<!--    <select id="selectByCondition" resultMap="brandResultMap">
        select *
            from tb_brand
        where

              status = #{status}
            and company_name like #{companyName}
            and brand_name like #{brandName}


    </select>-->
    <!--动态查询
            <if>
             test:放查询语句
             但是if标签有bug如果第一个比如以下status没有，那么就会出现错误因为where紧跟and导致
            解决办法：
            1. 加 where 1=1 ，改变判断
            2.用<where>标签

    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
       /* where 1 = 1*/
       <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
           <if test="brandName != null and brandName != ''">
               and brand_name like #{brandName}
           </if>
       </where>


    </select>


 <!--   <insert id="add">

        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});

    </insert>-->

    <!--主键 返回要在insert中设置两个内容  useGeneratedKeys="true" keyProperty="id" -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">

        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});

    </insert>

    <!--z这样只能全部修改，无法实现单独修改-->
 <!--   <update id="update">
            update tb_brand
              set
                brand_name = #{brandName},
                company_name = #{companyName},
                ordered = #{ordered},
                description = #{description},
                status = #{status}
              where id = #{id}

    </update>-->
    <!--动态修改        -->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id}

    </update>
    <delete id="deleteById">
        delete from tb_brand
        where id = #{id}

    </delete>
    <delete id="deleteByIds">
        delete from tb_brand
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>

    </delete>

</mapper>